{"version":3,"sources":["webpack:///./src/common/header.tsx","webpack:///./src/common/panel.tsx","webpack:///./src/common/dayInfo/index.tsx","webpack:///./src/pages/day/{brangsJson.date}.tsx"],"names":["Header","styles","useStyles","className","headerGap","header","container","href","makeStyles","position","top","left","height","width","backgroundImage","theme","colors","headerBackground","Panel","children","clsx","paper","margin","border","borders","tableBorder","backgroundColor","transparentBackground","Body","day","brangs","selectedCategories","categories","selectCategories","ThemeProvider","muiTheme","Grid","direction","spacing","alignItems","item","justifyContent","Typography","moment","format","changeSelectedCategories","map","brang","i","key","brangPanel","wrap","sm","xs","to","id","variant","name","time","startTime","tags","tag","fontSize","padding","lineHeight","locale","week","dow","Day","data","params","useState","selected","setSelected","allBrangsJson","nodes","filter","b","length","t","includes","date","allTagsJson"],"mappings":"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","file":"component---src-pages-day-brangs-json-date-tsx-158d0bd77534f206cd36.js","sourcesContent":["import { Box, Grid, IconButton, makeStyles } from '@material-ui/core';\r\nimport { ChevronLeft } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport { theme } from './lib/theme';\r\n\r\nexport const Header = () => {\r\n  const styles = useStyles()\r\n  return (\r\n    <>\r\n      <Box className={styles.headerGap}/>\r\n      <Box className={styles.header}>\r\n        <Grid container>\r\n          <IconButton href=\"/\">\r\n            <ChevronLeft/>\r\n          </IconButton>\r\n        </Grid>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  header: {\r\n    position: 'fixed',\r\n    top: '0',\r\n    left: '0',\r\n    height: '10%',\r\n    width: '100%',\r\n    backgroundImage: theme.colors.headerBackground\r\n  },\r\n  headerGap: {\r\n    height: '10%'\r\n  }\r\n})\r\n","import { makeStyles, Paper } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport React, { PropsWithChildren } from 'react';\r\nimport { theme } from './lib/theme';\r\n\r\ninterface PanelProps {\r\n  className?: string\r\n}\r\n\r\nexport const Panel = ({children, className}: PropsWithChildren<PanelProps>) => {\r\n  const styles = useStyles()\r\n  return (\r\n    <Paper className={clsx(styles.paper, className)}>\r\n      {children}\r\n    </Paper>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  paper: {\r\n    margin: \"24px\",\r\n    border: theme.borders.tableBorder,\r\n    backgroundColor: theme.colors.transparentBackground\r\n  }\r\n})\r\n","import { Grid, makeStyles, ThemeProvider, Typography } from \"@material-ui/core\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { CategorySelector } from \"../body/categorySelector\";\nimport { Tag } from \"../body/tag\";\nimport { Header } from \"../header\";\nimport { BrangDayInfo } from \"../lib/model\";\nimport { muiTheme } from \"../lib/theme\";\nimport { Panel } from \"../panel\";\n\ninterface BodyProps {\n  day: string\n  brangs: BrangDayInfo[],\n  categories: string[],\n  selectedCategories: string[],\n  selectCategories: (selected: string[]) => void\n}\n\nexport const Body = ({day, brangs, selectedCategories, categories, selectCategories}: BodyProps) => {\n  const styles = useStyles();\n  return (\n    <ThemeProvider theme={muiTheme}>\n      <Header/>\n      <Grid container direction=\"column\" spacing={3} alignItems=\"stretch\">\n        <Grid item>\n          <Panel>\n            <Grid container direction=\"column\" spacing={1} alignItems=\"stretch\">\n              <Grid item container justifyContent=\"center\">\n                <Typography className={styles.day}>\n                  {moment(day, \"YYYY-MM-DD\").format(\"D MMMM YYYY\")}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <CategorySelector\n                  categories={categories}\n                  selectedCategories={selectedCategories}\n                  changeSelectedCategories={selectCategories}/>\n              </Grid>\n            </Grid>\n          </Panel>\n        </Grid>\n        {\n          brangs.map((brang, i) => (\n            <Grid item key={i}>\n              <Panel className={styles.brangPanel}>\n                <Grid container justifyContent=\"space-between\" wrap=\"nowrap\" alignItems=\"center\" spacing={1}>\n                  <Grid item sm={8} xs={4}>\n                    <Link to={`/brang/${brang.id}`}>\n                      <Typography variant=\"h2\" className={styles.name}>{brang.name}</Typography>\n                    </Link>\n                  </Grid>\n                  <Grid item container direction=\"column\" alignItems=\"center\" spacing={2} sm={4} xs={8}>\n                    <Grid item>\n                      <Typography variant=\"h2\" className={styles.time}>\n                        {brang.startTime}\n                      </Typography>\n                    </Grid>\n                    <Grid item container justifyContent=\"center\" wrap=\"nowrap\">\n                      {brang.tags.map((tag, i) => (\n                        <Grid item key={i}>\n                          <Tag>\n                            {tag}\n                          </Tag>\n                        </Grid>\n                      ))}\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Panel>\n            </Grid>\n          ))\n        }\n      </Grid>\n    </ThemeProvider>\n  )\n}\n\nconst useStyles = makeStyles(muiTheme => ({\n  name: {\n    fontSize: \"20px\",\n  },\n  time: {\n    fontSize: \"20px\",\n  },\n  brangPanel: {\n    padding: \"10px\"\n  },\n  day: {\n    fontSize: \"34px\",\n    lineHeight: \"40px\"\n  }\n}))\n","import { graphql } from 'gatsby';\r\nimport moment from 'moment';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport { Body } from '../../common/dayInfo';\r\nimport { DateParam, DayQuery, QueryData } from '../../common/lib/model';\r\nimport { Head } from '../../common/seo';\r\nimport '../styles.css'\r\n\r\nmoment.locale('ru', {\r\n  week: {\r\n    dow: 1,\r\n  }\r\n})\r\n\r\nexport const query = graphql`\r\n  query dayQuery($date: Date) {\r\n    allBrangsJson(filter: {date: {eq: $date}}) {\r\n      nodes {\r\n        id\r\n        name\r\n        startTime\r\n        tags\r\n      }\r\n    }\r\n    allTagsJson {\r\n      nodes {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst Day = ({data, params}: QueryData<DayQuery, DateParam>) => {\r\n  const [selected, setSelected] = useState([] as string[]),\r\n    brangs = data.allBrangsJson.nodes.filter(b =>\r\n      selected.length == 0 || b.tags.filter(t => selected.includes(t)).length > 0)\r\n\r\n  return (\r\n    <>\r\n      <Head/>\r\n      <Body\r\n       day={params.date}\r\n       brangs={brangs}\r\n       categories={data.allTagsJson.nodes.map(tag => tag.name)}\r\n       selectedCategories={selected}\r\n       selectCategories={setSelected}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Day;\r\n"],"sourceRoot":""}